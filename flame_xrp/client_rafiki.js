// Check to have "ilp-protocol-stream" and "ilp-plugin" installed. Install as necessary, and update path below if needed.
const IlpStream = require('/home/sedan/.nvm/versions/node/v8.11.3/lib/node_modules/ilp-protocol-stream')
const createPlugin = require('/home/sedan/.nvm/versions/node/v8.11.3/lib/node_modules/ilp-plugin')

//copy-paste the credentials generated by server script below
const destinationAccount = 'g.conn1.moneyd_GUI.js102Ss92_uE9aOXVC44Cd0S8grsJdY9G2ah1CjPqTE.AWLTBpucZSuwVhOMQnKPfaO3'
const sharedSecret = Buffer.from('26e7d4da48d03b6ba1e55c41af14c189813a92af6a02598ed35485e9f6d05443', 'hex')

const noOfStreams = +process.argv[2]
const totalAmountToSendPerStream = +process.argv[3]    // amount globalSent per session = totalAmountToSendPerStream * noOfStreams
const amountStep = +process.argv[4]

async function run () {

        console.log(`process.argv[2], noOfStreams: ${noOfStreams}`)
        console.log(`process.argv[3], totalAmountToSendPerStream: ${totalAmountToSendPerStream}`)
        console.log(`process.argv[4], amountStep: ${amountStep}`)

	const clientPlugin = createPlugin()
	const clientConn = await IlpStream.createConnection({
	  plugin: clientPlugin,
	  destinationAccount,
	  sharedSecret,
          idleTimeout: 60000000,   //connection timeout on idle time (msec)
	})

        console.log('*** idleTimeout:', clientConn.idleTimeout)

        var streams = []           // store the created streams here

        //initiate the connections for the streams
        for (j=0; j<noOfStreams ; j++) {
	    // Streams are automatically given ids (client-initiated ones are odd, server-initiated are even)
            streams[j] = clientConn.createStream()  //these are client initiated so IDs are odd 1 3 5 7 9 ....
        }

        var totalCalls = 0
        var globalSent = 0
        var i = amountStep // initialize first at the amountStep
            while (i <= totalAmountToSendPerStream) {       //while we didn't yet send the total intended amount (per stream),
              for (j=0; j<noOfStreams ; j++) {    //on each stream:
                console.log(`***** Sending ${amountStep} units to server on stream no ${j+1} with ID ${streams[j].id}`)
	        await streams[j].sendTotal(i)     //send the "amountStep". In other words, send (the difference between the total amount sent until now and the value of "i") = the "amoutStep". Formula: i = amountSentUntilNow + amountStep
                console.log(`***** Sent ${amountStep} units on stream no ${j+1} with ID ${streams[j].id}. Total amount sent during current session on stream no ${j+1} with ID ${streams[j].id} =`, streams[j].totalSent, 'units')
                globalSent = globalSent + amountStep
                totalCalls = totalCalls + 1 //should be number of packets sent
                console.log(`***** Total amount sent per all streams in this session: ${globalSent} units`)
                console.log(`***** Total calls (packets sent) = ${totalCalls}`)
                console.log('###############################################################################################################################')
              }
              i = i+amountStep
            }


        //stream.end()
        process.exit(0)

}

run()
  .catch((e) => {
      console.error(e)
      process.exit(1)
  })

