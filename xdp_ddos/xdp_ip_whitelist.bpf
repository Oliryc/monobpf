#define KBUILD_MODNAME "foo"
#include <uapi/linux/bpf.h>
#include <linux/in.h>
#include <linux/if_ether.h>
#include <linux/if_packet.h>
#include <linux/if_vlan.h>
#include <linux/ip.h>
#include <linux/ipv6.h>

// IP not recognised
#define NOIP 0
#define NOIP6 ((struct in6_addr) 0); // TODO Find something better

#define WHITE4SIZE 0
#define WHITE6SIZE 10

static int ip4white[] = {}; // Update WHITE4SIZE
static struct in6_addr ip6white[] = {}; // Update WHITE6SIZE

BPF_TABLE("percpu_array", uint32_t, long, dropcnt, 256);

/* Returns IPv4 address, in network byte order */
static inline int get_ipv4(void *data, u64 nh_off, void *data_end) {
    struct iphdr *iph = data + nh_off;

    if ((void*)&iph[1] > data_end)
        return NOIP;
    return iph->saddr;
}

/* Returns IPv6 address, in network byte order */
/*
static inline struct in6_addr get_ipv6(void *data, u64 nh_off, void *data_end) {
    struct ipv6hdr *ip6h = data + nh_off;

    if ((void*)&ip6h[1] > data_end)
        return NOIP6;
    return ip6h->saddr;
}
*/

int xdp_prog1(struct CTXTYPE *ctx) {

    void* data_end = (void*)(long)ctx->data_end;
    void* data = (void*)(long)ctx->data;

    bpf_trace_printk("examples/networking/xdp/xdp_drop_count: %u\\n", data_end-data);

    struct ethhdr *eth = data;

    // drop packets
    int rc = XDP_DROP; // let pass XDP_PASS or redirect to tx via XDP_TX
    long *value;
    uint16_t h_proto;
    uint64_t nh_off = 0;
    uint32_t index;

    nh_off = sizeof(*eth);

    if (data + nh_off  > data_end)
        return rc;

    h_proto = eth->h_proto;

    // parse double vlans
    #pragma unroll
    for (int i=0; i<2; i++) {
        if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
            struct vlan_hdr *vhdr;

            vhdr = data + nh_off;
            nh_off += sizeof(struct vlan_hdr);
            if (data + nh_off > data_end)
                return rc;
                h_proto = vhdr->h_vlan_encapsulated_proto;
        }
    }

    // Allow packet to pass if ip in whitelist
    if (h_proto == htons(ETH_P_IP)) {
        int ip = get_ipv4(data, nh_off, data_end);
        if (ip == NOIP) {
          return XDP_DROP;
        }
        #pragma unroll
        for (int i = 0; i < WHITE4SIZE; i++) {
          if (ip4white[i] == ip)
            return XDP_PASS;
          return XDP_DROP;
        }
    }
        /*
    else if (h_proto == htons(ETH_P_IPV6))
        struct in6_addr ip6 = get_ipv6(data, nh_off, data_end);
        if (ip == NOIP6) {
          return XDP_DROP;
        }
        #pragma unroll
        for (int i = 0; i < WHITE6SIZE; i++) {
          if (ip6white[i] == ip)
            return XDP_PASS;
          return XDP_DROP;
        }
        */
    else
        return XDP_DROP;

    return XDP_DROP;
}

