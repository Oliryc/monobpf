// vim:set ft=c:
#define KBUILD_MODNAME "foo"
#include <uapi/linux/bpf.h>
#include <linux/in.h>
#include <linux/if_ether.h>
#include <linux/if_packet.h>
#include <linux/if_vlan.h>
#include <linux/ip.h>
#include <linux/ipv6.h>

/*
 * We want to extract information from an HTTP Payload in a packet.
 * So we need to figure out where this HTTP payload starts (taking into account variable length header for IP and TCP) and to then to parse it from there
 */

/* TODO
 * [ ] Extract length for IPv4
 * [ ] Extract length for IPv6
 * [ ] Limit ourselves to ports 80 & 443 to decide faster when we want to stop analysing a packet
 * [ ] See HTTPS case -> decrypt payload with private key given to the user space programm by user?
 * [ ] HTTP2 support?
 * [ ] Remove trace_printk
 */

BPF_TABLE("array", int, long, dropcnt, 256);

// Return length (in bit) of the IPv4 header in the paquet between data and data_end.
// Uses nh_off as the offset to the beginning of the IP header
static inline int length_ipv4_header(void *data, u64 nh_off, void *data_end) {
    struct iphdr *iph = data + nh_off;

    bpf_trace_printk("data: 0x%p\n", data);
    bpf_trace_printk("data_end: 0x%p\n", data_end);
    bpf_trace_printk("data_end-data: 0x%p\n", data_end-data);
    bpf_trace_printk("nh_off: 0x%p\n", nh_off);

    if ((void*)&iph[1] > data_end)
        return 0;
    bpf_trace_printk("iph->version: %u\n", iph->version);
    bpf_trace_printk("iph->ihl: %u\n", iph->ihl);

    // The IHL field is in 32-bit word
    int header_length = (int) (iph->ihl*32);
    return header_length;
}

static inline int parse_ipv6(void *data, u64 nh_off, void *data_end) {
    struct ipv6hdr *ip6h = data + nh_off;

    if ((void*)&ip6h[1] > data_end)
        return 0;
    return ip6h->nexthdr;
}

int xdp_prog1(struct CTXTYPE *ctx) {

    void* data_end = (void*)(long)ctx->data_end;
    void* data = (void*)(long)ctx->data;

    struct ethhdr *eth = data;

    // drop packets
    int rc = RETURNCODE; // let pass XDP_PASS or redirect to tx via XDP_TX
    long *value;
    uint16_t h_proto;
    uint64_t nh_off = 0;

    // Network offset, two MAC address?
    nh_off = sizeof(*eth);

    if (data + nh_off  > data_end)
        return rc;

    h_proto = eth->h_proto;

    // While the following code appears to be duplicated accidentally,
    // it's intentional to handle double tags in ethernet frames.
    if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
        struct vlan_hdr *vhdr;

        vhdr = data + nh_off;
        nh_off += sizeof(struct vlan_hdr);
        if (data + nh_off > data_end)
            return rc;
            h_proto = vhdr->h_vlan_encapsulated_proto;
    }
    if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
        struct vlan_hdr *vhdr;

        vhdr = data + nh_off;
        nh_off += sizeof(struct vlan_hdr);
        if (data + nh_off > data_end)
            return rc;
            h_proto = vhdr->h_vlan_encapsulated_proto;
    }

    // Offset due to IP Header
    int ip_offset = 0;

    if (h_proto == htons(ETH_P_IP))
        // TODO If length_ipv4_header gives 0, then what?
        ip_offset = length_ipv4_header(data, nh_off, data_end);
    else if (h_proto == htons(ETH_P_IPV6))
        //TODO
        //ip_offset = length_ipv6_header(data, nh_off, data_end);
        ip_offset = 0;

    bpf_trace_printk("ip_offset: %lu\n", ip_offset);

    // Get TCP header length
    // TODO

    // Parse HTTP payload
    // TODO

    /*
    value = dropcnt.lookup(&index);
    if (value) lock_xadd(value, 1);
    */

    return rc;
}

