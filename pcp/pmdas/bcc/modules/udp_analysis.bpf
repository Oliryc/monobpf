#include <uapi/linux/ptrace.h>
#include <net/sock.h>
#include <bcc/proto.h>

#define IP_UDP 	17
#define UDP_HLEN 14
#define ETH_HLEN 14
#define PAY_LEN_CMP 5 // Payload length used for comparison

enum TlsContentType {
  ChangeCipherSpec = 20,
  Alert = 21,
  Handshake = 22,
  ApplicationData = 23,
};

struct Key {
	u32 src_ip;               //source ip
	u32 dst_ip;               //destination ip
	unsigned short src_port;  //source port
	unsigned short dst_port;  //destination port
};

struct Leaf {
	int timestamp;            //timestamp in ns
};

//BPF_TABLE(map_type, key_type, leaf_type, table_name, num_entry)
//map <Key, Leaf>
//tracing sessions having same Key(dst_ip, src_ip, dst_port,src_port)
BPF_HASH(sessions, struct Key, struct Leaf, 1024);

/*eBPF program.
  Filter IP and UDP packets, having payload not empty
  and containing "HTTP", "GET", "POST"  as first bytes of payload.
  AND ALL the other packets having same (src_ip,dst_ip,src_port,dst_port)
  this means belonging to the same "session"
  this additional allows to reassemble packets, if necessary
  return  0 -> DROP the packet
  return -1 -> KEEP the packet and return it to user space (userspace can read it from the socket_fd )
*/
int udp_analysis(struct __sk_buff *skb) {

	u8 *cursor = 0;

	struct ethernet_t *ethernet = cursor_advance(cursor, sizeof(*ethernet));
	//filter IP packets (ethernet type = 0x0800)
	if (!(ethernet->type == 0x0800)) {
		goto DROP;
	}

	struct ip_t *ip = cursor_advance(cursor, sizeof(*ip));
	//filter TCP packets (ip next protocol = 0x06)
	if (ip->nextp != IP_UDP) {
		goto DROP;
	}

	u32  udp_header_length = 0;
	u32  ip_header_length = 0;
	u32  payload_offset = 0;
	u32  payload_length = 0;
	struct Key 	key;
	struct Leaf zero = {0};

        //calculate ip header length
        //value to multiply * 4
        //e.g. ip->hlen = 5 ; IP Header Length = 5 x 4 byte = 20 byte
        ip_header_length = ip->hlen << 2;    //SHL 2 -> *4 multiply

        //check ip header length against minimum
        if (ip_header_length < sizeof(*ip)) {
                goto DROP;
        }

        //shift cursor forward for dynamic ip header size
        void *_ = cursor_advance(cursor, (ip_header_length-sizeof(*ip)));

	struct udp_t *udp = cursor_advance(cursor, sizeof(*udp));

	//retrieve ip src/dest and port src/dest of current packet
	//and save it into struct Key
	key.dst_ip = ip->dst;
	key.src_ip = ip->src;
	key.dst_port = udp->dport;
	key.src_port = udp->sport;

	//FILTER_IP

	//FILTER_LDPORT

	//FILTER_NOT_LDPORT

	//FILTER_DPORT

	//FILTER_LPORT

	//calculate payload offset and length
	payload_offset = ETH_HLEN + ip_header_length + UDP_HLEN;
	payload_length = ip->tlen - ip_header_length - UDP_HLEN;

  goto KEEP; // TODO Store in session map
  // TODO Adapt to TLS beyond this line

  // We will identify DTLS 1.0 packets based on the Contentype byte (1 byte)
  // and the version bytes (2 bytes), per
  // https://tools.ietf.org/html/rfc4346#page-18 and
  // https://tools.ietf.org/html/rfc4347#page-20.
  // A length field of 2 bytes is also required.
	if(payload_length < PAY_LEN_CMP) {
		goto DROP;
	}

	//load first bytes of payload into p (payload_array)
	//direct access to skb not allowed
	unsigned long p[PAY_LEN_CMP];
	int i = 0;
	for (i = 0; i < PAY_LEN_CMP; i++) {
		p[i] = load_byte(skb, payload_offset + i);
	}

	//find a match with a TLS content type
  switch (p[0]) {
    case ChangeCipherSpec:
      goto TLS_MATCH;
      break;
    case Alert:
      goto TLS_MATCH;
      break;
    case Handshake:
      goto TLS_MATCH;
      break;
    case ApplicationData:
      goto TLS_MATCH;
      break;
    default:
      /*
      //check if packet belong to a TLS session
      struct Leaf * lookup_leaf = sessions.lookup(&key);
      if(lookup_leaf) {
        goto KEEP;
      }
      goto DROP;
      */
      break;
  }

  // Looks like TLS, check it is DTLS 1.0
	TLS_MATCH:
  if (p[1] == 0xfe && p[2] == 0xff) {
    goto DTLS_MATCH;
  }
  goto DROP;

	//keep the packet and store its key in the sessions
	DTLS_MATCH:
	//if not already present, insert into map <Key, Leaf>
	sessions.lookup_or_init(&key,&zero);

	//send packet to userspace returning -1
	KEEP:
	return -1;

	//drop the packet returning 0
	DROP:
	return 0;

}
